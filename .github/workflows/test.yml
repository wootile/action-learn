# This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME.
#

name: Build and Deploy to ACK

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: cn-hangzhou
  REGISTRY: registry-vpc.cn-hangzhou.aliyuncs.com
  REGISTRY_USERNAME: aliyun9681285594
  NAMESPACE: wootile-public
  IMAGE: action-learn
  # TAG: ${{ github.sha }}
  ACK_CLUSTER_ID: cf0b015f6e1964fbb90883987a0dbcd23
  ACK_DEPLOYMENT_NAME: action-learn

permissions:
  contents: read

jobs:
  build:
    runs-on: self-hosted
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "short_sha=$calculatedSha" >> $GITHUB_ENV

    # 1.1 Login to ACR
    - name: Login to ACR with the username
      uses: aliyun/acr-login@v1
      with:
        login-server: "${{ env.REGISTRY }}"
        username: "${{ env.REGISTRY_USERNAME }}"
        password: "${{ secrets.REGISTRY_PASSWORD }}"

    # 1.2 Buid and push image to ACR
    - name: Build and push image to ACR
      env:
        TAG: ${{ env.short_sha }}
      run: |
        docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .
        docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"

    # 1.3 Scan image in ACR
    - name: Scan image in ACR
      uses: aliyun/acr-scan@v1
      with:
        region-id: "${{ env.REGION_ID }}"
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        repository: "${{ env.NAMESPACE }}/${{ env.IMAGE }}"
        tag: "${{ env.short_sha }}"

    # 3.1 Set ACK context
    - name: Set K8s context
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        cluster-id: "${{ env.ACK_CLUSTER_ID }}"

    # # 3.2 Deploy the image to the ACK cluster
    - name: Deploy
      env:
        TAG: ${{ env.short_sha }}
      run: |-
        kubectl cluster-info
        helm upgrade --install action-learn ./deploy/charts --set image.tag=$TAG
        # kubectl set image deployment/$ACK_DEPLOYMENT_NAME action-learn=$REGISTRY/$NAMESPACE/$IMAGE:$TAG
